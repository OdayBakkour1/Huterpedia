my project overview: 
# Huterpedia

**Intelligence. Curated. Real-Time.**

---

## Table of Contents

- [Project Overview](#project-overview)
- [Tech Stack](#tech-stack)
- [Project Structure](#project-structure)
- [Getting Started](#getting-started)
- [Frontend Development](#frontend-development)
- [Backend (Supabase Edge Functions)](#backend-supabase-edge-functions)
- [Environment Variables & Secrets](#environment-variables--secrets)
- [Payment Integration](#payment-integration)
- [Admin Features](#admin-features)
- [Contributing Guidelines](#contributing-guidelines)
- [Deployment](#deployment)
- [Troubleshooting](#troubleshooting)

---

## Project Overview

Huterpedia is a modern, real-time intelligence platform built with Vite + React, Supabase (Postgres, Auth, Edge Functions), and deployed on Vercel. It features a robust payment system (KazaWallet), advanced admin tools, and a modular, scalable architecture.

---

## Tech Stack

- **Frontend:** Vite, React, TypeScript, TailwindCSS
- **Backend:** Supabase (Postgres, Auth, Edge Functions)
- **Payments:** KazaWallet (via Supabase Edge Functions)
- **Deployment:** Vercel (frontend), Supabase (backend)
- **Other:** ESM modules, Deno (for Edge Functions)

---

## Project Structure

```
Huterpedia/
│
├── src/                  # Main frontend source code
│   ├── components/       # React components (UI, admin, profile, payment, etc.)
│   ├── pages/            # Route-based pages (Checkout, Pricing, Auth, etc.)
│   ├── hooks/            # Custom React hooks
│   ├── contexts/         # React context providers (Auth, Theme)
│   ├── utils/            # Utility/helper functions
│   ├── data/             # Mock/static data
│   ├── types/            # TypeScript type definitions
│   ├── integrations/     # Supabase client/types
│   └── index.css         # Global styles
│
├── supabase/
│   ├── functions/        # Supabase Edge Functions (backend logic)
│   │   ├── create-payment/
│   │   ├── webhook-handler/
│   │   ├── fetch-news/
│   │   ├── fetch-threat-actors/
│   │   ├── summarize-article/
│   │   └── generate-description/
│   └── migrations/       # Database migrations
│
├── public/               # Static assets
├── package.json          # Project dependencies and scripts
├── README.md             # Project documentation (this file)
└── ...                   # Config files, etc.
```

---

## Getting Started

### 1. **Clone the Repository**
```sh
git clone https://github.com/OdayBakkour1/Huterpedia.git
cd Huterpedia
```

### 2. **Install Dependencies**
```sh
npm install
```

### 3. **Set Up Environment Variables**
- Copy `.env.example` to `.env` (if provided) and fill in the required values.
- For frontend, use `VITE_` prefix (e.g., `VITE_SUPABASE_URL`).
- Backend secrets are managed in the Supabase dashboard.

### 4. **Run the Development Server**
```sh
npm run dev
```
- The app will be available at `http://localhost:5173` (or as specified).

---

## Frontend Development

- **Components:** Located in `src/components/` (organized by feature, e.g., `admin/`, `profile/`, `ui/`).
- **Pages:** Located in `src/pages/` (route-based, e.g., `/checkout`, `/pricing`, `/auth`).
- **Hooks:** Custom hooks in `src/hooks/` (e.g., `usePayment.js`, `useAdminData.tsx`).
- **Contexts:** Auth and Theme providers in `src/contexts/`.
- **Styling:** TailwindCSS and custom CSS in `src/index.css`.

**Key Payment Components:**
- `PaymentButton.jsx` / `KazawalletButton.tsx`: Initiate payments via Supabase Edge Function.
- `PaymentStatus.jsx`: Polls and displays payment status.
- `PaymentHistory.jsx`: Shows user payment history.

**Admin Components:**
- Located in `src/components/admin/` (e.g., `UsersManagement.tsx`, `CouponManagement.tsx`, `AnalyticsDashboard.tsx`).

---

## Backend (Supabase Edge Functions)

All backend logic is handled via Supabase Edge Functions (Deno/TypeScript):

- **Location:** `supabase/functions/`
- **Key Functions:**
  - `create-payment`: Handles payment intent creation and KazaWallet integration.
  - `webhook-handler`: Handles KazaWallet webhooks and updates payment status.
  - `fetch-news`, `fetch-threat-actors`, `summarize-article`, `generate-description`: Other business logic.

**To edit a function:**
1. Update the code in the relevant `index.ts` file.
2. Deploy using the Supabase CLI:
   ```sh
   supabase functions deploy <function-name>
   ```

---

## Environment Variables & Secrets

- **Frontend:** Use `.env` with `VITE_` prefix for variables needed in React.
- **Backend:** Set secrets in the Supabase dashboard under **Edge Functions > Secrets**.
  - Required: `SUPABASE_URL`, `SUPABASE_SERVICE_ROLE_KEY`, `KAZAWALLET_API_KEY`, `KAZAWALLET_API_SECRET`, `SITE_URL`

**Never expose the Service Role key or KazaWallet secrets to the frontend!**

---

## Payment Integration

- Payments are initiated from the frontend by calling the `create-payment` Edge Function.
- The function stores the payment intent in Supabase and calls the KazaWallet API.
- KazaWallet redirects the user and sends a webhook to the `webhook-handler` function.
- Payment status is polled and displayed in the UI.

**To update payment logic:**
- Edit `supabase/functions/create-payment/index.ts` and/or `webhook-handler/index.ts`.
- Update frontend components as needed.

---

## Admin Features

- Bulk import news sources, manage users, monitor system, manage coupons, and view analytics.
- All admin components are in `src/components/admin/`.
- Access control is handled via Supabase Auth and role checks.

---

## Contributing Guidelines

- **Branching:** Use feature branches for new features/bugfixes.
- **Commits:** Write clear, descriptive commit messages.
- **Code Style:** Follow existing code style (TypeScript, React, Tailwind).
- **Testing:** Test your changes locally before pushing.
- **Pull Requests:** Open a PR for review before merging to `main`.

---

## Deployment

- **Frontend:** Deployed via Vercel (auto-deploys from `main` branch).
- **Backend:** Deploy Edge Functions using the Supabase CLI:
  ```sh
  supabase functions deploy <function-name>
  ```
- **Secrets:** Update secrets in the Supabase dashboard as needed.

---

## Troubleshooting

- **CORS Issues:** Ensure CORS headers are set in Edge Functions.
- **401 Errors:** Make sure to send the correct `Authorization` header if required, or allow public access as needed.
- **500 Errors:** Check function logs in the Supabase dashboard for stack traces and error messages.
- **Payment Issues:** Check both Supabase logs and KazaWallet dashboard for errors.

---

## Contact

For questions or onboarding help, contact the project maintainer or check the internal documentation.

---

**Happy coding!**